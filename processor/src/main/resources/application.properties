# where to push the image
quarkus.container-image.registry=quay.io
quarkus.container-image.group=kevindubois

# Go back to the first records, if it's our first access
# kafka.auto.offset.reset=earliest
kafka.topic.name=votes

# Kafka brokers
%prod.camel.component.kafka.brokers=${KAFKA_BOOTSTRAP_SERVERS}

%dev.quarkus.hibernate-orm.database.generation=drop-and-create
# %prod.quarkus.hibernate-orm.database.generation=update
quarkus.datasource.db-kind=postgresql

%prod.quarkus.datasource.username=${POSTGRES_USER}
%prod.quarkus.datasource.password=${POSTGRES_PASSWORD}
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_SERVER}:5432/votedb

#quarkus.hibernate-orm.sql-load-script=import.sql
quarkus.flyway.create-schemas=true
quarkus.flyway.migrate-at-start=true
quarkus.flyway.default-schema=public
quarkus.flyway.validate-on-migrate=true
%test.quarkus.flyway.clean-at-start=true
%dev.quarkus.flyway.clean-at-start=true

%dev.quarkus.http.port=8082

kubernetes.namespace=cameldemo

# trust certs for demo app - set to false if you have proper certs
quarkus.kubernetes-client.trust-certs=true

quarkus.kubernetes.deployment-target=knative
quarkus.kubernetes.part-of=cameldemo
quarkus.knative.part-of=cameldemo
quarkus.openshift.part-of=cameldemo

quarkus.knative.min-scale=1
# quarkus.kubernetes-client.namespace=${kubernetes.namespace}

# # When we're deploying on kubernetes 'prod', use config map 'appconfig'
%prod.quarkus.kubernetes-config.enabled=true
%prod.quarkus.kubernetes-config.config-maps=appconfig
# Get credentials from a 'db' secret
# %prod.quarkus.kubernetes-config.namespace=${kubernetes.namespace}
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.secrets=db



