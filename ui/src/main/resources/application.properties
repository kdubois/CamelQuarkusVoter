
ingester.url=http://localhost:8081
processor.url=http://localhost:8082

quarkus.rest-client.processor-api.url=${processor.url}
%dev.quarkus.rest-client.processor-api.url=${processor.url}
quarkus.rest-client.processor-api.scope=javax.inject.Singleton
%dev.quarkus.rest-client.extensions-api.hostname-verifier=io.quarkus.restclient.NoopHostnameVerifier
%dev.quarkus.tls.trust-all=true

kubernetes.namespace=cameldemo

# trust certs for demo app - set to false if you have proper certs
quarkus.kubernetes-client.trust-certs=true
# base image for s2i build
#quarkus.s2i.base-jvm-image=registry.access.redhat.com/ubi8/openjdk-11
# where to push the built image (in this case, the internal openshift registry)
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.container-image.group=${kubernetes.namespace}
quarkus.openshift.build-strategy=docker

# deploy as serverless knative image that can scale to 0 so we don't use resources when the route's not running
quarkus.kubernetes.deployment-target=knative
quarkus.knative.part-of=cameldemo
# quarkus.kubernetes-client.namespace=${kubernetes.namespace}

# # When we're deploying on openshift 'prod', use config map 'appconfig'
%prod.quarkus.kubernetes-config.enabled=true
# %prod.quarkus.kubernetes-config.namespace=${kubernetes.namespace}
quarkus.kubernetes-config.config-maps=appconfig


quarkus.http.test-port=8090
