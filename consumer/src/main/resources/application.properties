kafka.topic.name=votes

# Kafka brokers
%prod.camel.component.kafka.brokers=${kafka.bootstrap.servers}

%dev.quarkus.http.port=8081
quarkus.http.test-port=8083

# trust certs for demo app - set to false if you have proper certs
quarkus.kubernetes-client.trust-certs=true
# base image for s2i build
#quarkus.s2i.base-jvm-image=registry.access.redhat.com/ubi8/openjdk-11
# where to push the built image (in this case, the internal openshift registry)
quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.container-image.group=kevin
#quarkus.kubernetes-client.namespace=kevin

quarkus.openshift.build-strategy=docker

quarkus.native.container-runtime=podman
# quarkus.native.additional-build-args =-H:ReflectionConfigurationFiles=reflection-config.json

#quarkus.openshift.build-strategy=docker
# build as a native image
quarkus.native.container-build=true
quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel:22.2.0.0-Final-java11
# deploy as serverless knative image that can scale to 0 so we don't use resources when the route's not running
quarkus.kubernetes.deployment-target=knative


# # When we're deploying on openshift 'prod', use config map 'appconfig'
%prod.quarkus.kubernetes-config.enabled=true
quarkus.kubernetes-config.config-maps=appconfig
# Get telegram credentials from a 'db' secret
%prod.quarkus.kubernetes-config.namespace=kevin
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.secrets=db

quarkus.openshift.part-of=cameldemo